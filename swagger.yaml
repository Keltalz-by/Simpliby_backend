tags:
  - name: Auth
    description: Everything about authentication
  - name: User
    description: Everything about managing users
  - name: Store
    description: Everything about creating and owning a store
  - name: Product
    description: Everything about creating and managing a product
  - name: Order
    description: Everything about creating and managing orders
  - name: ToBuy
    description: Everuthing about creating and managing to-buy list
  - name: Cart
    description: Everything about creating and managing user cart

paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register as a new user
      description: Register as a new user
      operationId: createUser
      requestBody:
        description: Create a new user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUser'

      responses:
        '201':
          description: Successful operation
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  success:
                    type: boolean

  /auth/verify:
    post:
      tags:
        - Auth
      summary: Verify your email address
      description: Verify your email address
      operationId: verifyUser
      requestBody:
        description: Verify user email
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                otp:
                  type: string
      responses:
        '200':
          description: Successful operation
        '400':
          description: Bad request

  /auth/resendotp:
    post:
      tags:
        - Auth
      summary: Resend OTP to email
      description: Resend OTP to email
      opreationId: resendOtp
      requestBody:
        description: Resend OTP
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                email:
                  type: string
      responses:
        '200':
          description: Successful operation
        '400':
          description: Bad request

  /auth/login:
    post:
      tags:
        - Auth
      summary: Login user
      description: Login user
      operationId: loginUser
      requestBody:
        description: Login
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUser'
      responses:
        '200':
          description: Successful operation
        '400':
          description: Bad request

  /auth/refresh:
    get:
      tags:
        - Auth
      summary: Refresh user access token
      description: Refresh user access token
      operationId: refreshToken
      responses:
        '200':
          description: Successful operation
        '403':
          description: Forbidden

  /auth/forgotpassword:
    post:
      tags:
        - Auth
      summary: Request for a new password
      description: Request for a new password
      operationId: forgotPassword
      requestBody:
        description: Request password reset
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string

      responses:
        '200':
          description: Successful operation
        '400':
          description: Bad request
        '404':
          description: Not found

  /auth/resetpassword:
    patch:
      tags:
        - Auth
      summary: Reset your password
      description: Reset your password
      operationId: resetPassword
      requestBody:
        description: Reset password
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                password:
                  type: string
                passwordConfirm:
                  type: string
                otp:
                  type: string

      responses:
        '200':
          description: Successful operation
        '400':
          description: Bad request

  /auth/logout:
    get:
      tags:
        - Auth
      summary: Logout user
      description: Logout user
      operationId: logoutUser
      responses:
        '204':
          description: Successful operation
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  #################
  # Store API #
  #################

  /stores:
    post:
      tags:
        - Store
      summary: Create a new store
      description: A verified user can create a new store
      operationId: createStore
      requestBody:
        description: Create a new store
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                businessName:
                  type: string
                location:
                  type: string
                description:
                  type: string
                address:
                  type: string
                city:
                  type: string
                country:
                  type: string

      responses:
        '201':
          description: Successful operation
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  /stores/search:
    post:
      tags:
        - Store
      summary: Search by store name
      operationId: SearchStore
      requestBody:
        description: Search a store by name
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Shoprite
      responses:
        '200':
          description: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  /products:
    post:
      tags:
        - Product
      summary: Create a new product
      description: A seller can create a new product
      operationId: createProduct
      requestBody:
        description: Create a new store
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                storeId:
                  type: string
                categoryId:
                  type: string
                productName:
                  type: string
                description:
                  type: string
                itemLocation:
                  type: string
                price:
                  type: string
                reservationPrice:
                  type: string
                productImages:
                  type: array
                  description: A maximum of 3 images can be uploaded
                  items:
                    type: string
                    format: binary
                productRackImage:
                  type: string
                  format: binary
      responses:
        '201':
          description: Successful operation
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  /users:
    get:
      tags:
        - User
      summary: Get all users
      description: Endpoint to get all users
      opeartionId: allUsers
      responses:
        '200':
          description: Successful operation
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  /users/{userId}:
    delete:
      tags:
        - User
      summary: Delete user
      description: Delete a user
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: User id to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successful operation
        '401':
          description: Unauthorized
        '404':
          description: Not Found

  #################
  # Cart API #
  #################

  /carts:
    post:
      tags:
        - Cart
      summary: Add product to cart
      operationId: AddToCart
      requestBody:
        description: Add product to cart
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddToCart'
      responses:
        '200':
          description: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
    
    get:
      tags:
        - Cart
      summary: Get user cart
      operationId: GetUserCart
      responses:
        '200':
          description: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error

    delete:
      tags:
        - Cart
      summary: Delete user cart
      operationId: DeleteUserCart
      responses:
        '204':
          description: Success
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error

  /carts/{productId}:
    patch:
      tags:
        - Cart
      summary: Remove product from cart
      description: Remove product from user's cart
      operationId: RemoveProductFromCart
      parameters:
        - name: productId
          in: path
          description: product id of product to remove
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error

  #################
  # Order API #
  #################

  # /orders:
  #   post:
  #     tags:
  #       - Order
  #     summary: Create a new order
  #     operationId: CreateOrder
  #     requestBody:
  #       description: Creates a new order
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/CreateOrder'
  #     responses:
  #       '201':
  #         description: Success
  #       '400':
  #         description: Bad request
  #       '401':
  #         description: Unauthorized
  #       '404':
  #         description: Not found
  #       '500':
  #         description: Internal server error

  # /orders/{orderId}:
  #   get:
  #     tags:
  #       - Order
  #     summary: Get a single order
  #     operationId: GetSingleOrder
  #     parameters:
  #       - name: orderId
  #         in: path
  #         description: ID of the order to retrieve
  #         required: true
  #         schema:
  #           type: string
  #     responses:
  #       '200':
  #         description: Success
  #       '401':
  #         description: Unauthorized
  #       '403':
  #         description: Forbidden
  #       '404':
  #         description: Not Found
  #       '500':
  #         description: Internal Server Error

  #################
  # ToBuy API #
  #################
  /tobuy:
    post:
      tags:
        - ToBuy
      summary: Create a new to buy list
      operationId: CreateToBuy
      requestBody:
        description: Create a new to buy list
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateToBuy'
      responses:
        '201':
          description: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  /tobuy/{id}:
    patch:
      tags:
        - ToBuy
      summary: Complete a tobuy
      operationId: CompleteToBuy
      parameters:
        - name: id
          in: path
          description: ID of the tobuy to complete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error

    delete:
      tags:
        - ToBuy
      summary: Delete a tobuy
      operationId: DeleteToBuy
      parameters:
        - name: id
          in: path
          description: ID of the tobuy to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    RegisterUser:
      type: object
      properties:
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: johndoe@gmail.com
        password:
          type: string
          example: 12345678
        passwordConfirm:
          type: string
          example: 12345678
    LoginUser:
      type: object
      properties:
        email:
          type: string
          example: johndoe@gmail.com
        password:
          type: string
          example: 12345678
    AddToCart:
      required:
        - productId
        - quantity
      type: object
      properties:
        productId:
          type: string
          example: 6446f19928ovb6637824c57g
        quantity:
          type: integer
          example: 2
    CreateOrder:
      required:
        - orderItems
      type: object
      properties:
        orderItems:
          type: array
          items:
            type: object
            properties:
              quantity:
                type: integer
              product:
                type: string
          example:
            - quantity: 2
              product: 6406f49c28aab6637894c58b
            - quantity: 1
              product: 6446f19928pmb6637894c52f
        phone:
          type: string
          example: 09032190812
        deliveryAddress:
          type: string
          example: 1, Mount street, Ikeja, Lagos
        state:
          type: string
          example: Lagos
        country:
          type: string
          example: Nigeria
    CreateToBuy:
      type: array
      items:
        type: object
        properties:
          title:
            type: string
      example:
        - title: Buy a new phone
        - title: Repair my laptop
