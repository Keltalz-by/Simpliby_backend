tags:
  - name: Auth
    description: Everything about managing users
  - name: Store
    description: Everything about creating and owning a store
  - name: Product
    description: Everything about creating and managing a 
  - name: Category
    description: Everything about creating and managing category
  - name: Order
    description: Everything about creating and managing orders
  # - name: ToBuy
  #   description: Everything about creating and managing to-buy list
  # - name: Cart
  #   description: Everything about creating and managing user cart

paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register as a new user
      description: Register as a new user
      operationId: createUser
      requestBody:
        description: Create a new user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUser'

      responses:
        201:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User created successfully. Check your email for verification code
                  data:
                    type: string
                    example: 64a1ec2412844224b6bfe154
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Invalid email format
        409:
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: User already exist

  /auth/verify:
    post:
      tags:
        - Auth
      summary: Verify your email address
      description: Verify your email address
      operationId: verifyUser
      requestBody:
        description: Verify user email
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  example: 64a1ec2412844224b6bfe154
                otp:
                  type: string
                  example: 1352
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User verified successfully
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Invalid OTP
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Internal server error

  /auth/resendotp:
    post:
      tags:
        - Auth
      summary: Resend OTP to email
      description: Resend OTP to email
      opreationId: resendOtp
      requestBody:
        description: Resend OTP
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  example: 64a1ec2412844224b6bfe154
                email:
                  type: string
                  example: johndoe@example.com
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OTP resent successfully. Check your email for the new OTP.
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: User already verified
        404:
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: User not found
        500:
          description: Interal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Internal server error

  /auth/login:
    post:
      tags:
        - Auth
      summary: Login user
      description: Login user
      operationId: loginUser
      requestBody:
        description: Login
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUser'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User logged in successfully
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 64a1ec2412844224b6bfe154
                      name:
                        type: string
                        example: John Doe
                      email:
                        type: string
                        example: john.doe@gmail.com
                      isEmailVerified:
                        type: boolean
                        example: true
                      role:
                        type: string
                        example: user
                      isSeller:
                        type: boolean
                        example: false
                      followings:
                        type: array
                        example: []
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Invalid email or password
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example:

  /auth/refresh:
    get:
      tags:
        - Auth
      summary: Refresh user access token
      description: Refresh user access token
      operationId: refreshToken
      responses:
        '200':
          description: Successful operation
        '403':
          description: Forbidden

  /auth/forgotpassword:
    post:
      tags:
        - Auth
      summary: Request for a new password
      description: Request for a new password
      operationId: forgotPassword
      requestBody:
        description: Request password reset
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string

      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Check your email for reset OTP
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: User not verified
        404:
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: User does not exist
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example:

  /auth/resetpassword:
    patch:
      tags:
        - Auth
      summary: Reset your password
      description: Reset your password
      operationId: resetPassword
      requestBody:
        description: Reset password
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                password:
                  type: string
                passwordConfirm:
                  type: string

      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Password reset successful. Procees to login
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Passwords are not the same
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example:

  /auth/logout:
    get:
      tags:
        - Auth
      summary: Logout user
      description: Logout user
      operationId: logoutUser
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User logged out successfully
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: You are not logged in
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example:

  #################
  # Store API #
  #################

  /stores:
    post:
      tags:
        - Store
      summary: Create a new store
      description: A user can create a new store
      operationId: createStore
      requestBody:
        description: Create a new store
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateStore'
      responses:
        '201':
          description: Successful operation
        '400':
          description: Bad request
        '409':
          description: Duplicate error
        '500':
          description: Internal server error

  /stores/{storeId}:
    patch:
      tags:
        - Store
      summary: Admin can verify a store
      operationId: verifyStore
      parameters:
        - name: storeId
          in: path
          description: ID of store to verify
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error

  /stores/{storeId}/follow:
    patch:
      tags:
        - Store
      summary: A user can follow a store
      operationId: followStore
      parameters:
        - name: storeId
          in: path
          description: ID of store to follow
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error

  /stores/{storeId}/unfollow:
    patch:
      tags:
        - Store
      summary: A user can unfollow a store
      operationId: unfollowStore
      parameters:
        - name: storeId
          in: path
          description: ID of store to unfollow
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error

  /stores/update:
    patch:
      tags:
        - Store
      summary: Update store details
      operationId: updateStore
      requestBody:
        description: A logged in store user can update store details
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateStore'
      responses:
        '200':
          description: Successful operation
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  /stores/search:
    post:
      tags:
        - Store
      summary: Search by store name
      operationId: SearchStore
      requestBody:
        description: Search a store by name
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Shoprite
      responses:
        '200':
          description: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  #################
  # Product API #
  #################

  /products:
    post:
      tags:
        - Product
      summary: Create a new product
      description: A seller can create a new product
      operationId: createProduct
      requestBody:
        description: Create a new store
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                storeId:
                  type: string
                categoryId:
                  type: string
                productName:
                  type: string
                description:
                  type: string
                itemLocation:
                  type: string
                price:
                  type: string
                reservationPrice:
                  type: string
                productImages:
                  type: array
                  description: A maximum of 3 images can be uploaded
                  items:
                    type: string
                    format: binary
                productRackImage:
                  type: string
                  format: binary
      responses:
        '201':
          description: Successful operation
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

    get:
      tags:
        - Product
      summary: Get all products
      description: Get all the products
      operationId: getAllProducts
      responses:
        '200':
          description: Successful operation
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  #################
  # Category API #
  #################

  /categories:
    get:
      tags:
        - Category
      summary: Get all categories
      description: Endpoint to get all categories
      opeartionId: allCategories
      responses:
        '200':
          description: Successful operation
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  /categories/{categoryId}/products:
    get:
      tags:
        - Category
      summary: Get products in a category
      description: Get all the products taht belong to a category
      operationId: categoryProducts
      parameters:
        - name: id
          in: path
          description: category id of roducts to get
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '401':
          description: Unauthorized
        '404':
          description: Not Found

  #################
  # User API #
  #################

  /users:
    get:
      tags:
        - User
      summary: Get all users
      description: Endpoint to get all users
      opeartionId: allUsers
      responses:
        '200':
          description: Successful operation
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  /users/{userId}:
    delete:
      tags:
        - User
      summary: Delete user
      description: Delete a user
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: User id to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successful operation
        '401':
          description: Unauthorized
        '404':
          description: Not Found

  #################
  # Order API #
  #################

  /stores/{storeId}/orders:
    post:
      tags:
        - Order
      summary: User creates an order
      description: A user can create an order
      operationId: createOrder
      parameters:
        - name: storeIdId
          in: path
          description: ID of the store to order from
          required: true
          schema:
            type: string
      requestBody:
        description: A user can create an order
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string
                  example: 649c54a4b551cdd6433c9e7f
                quantity:
                  type: integer
                  example: 2
      responses:
        '201':
          description: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal server error

  /stores/orders:
    get:
      tags:
        - Order
      summary: View all orders for store
      description: A seller can view all the orders for its store
      operationId: storeOrders
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal server error

  /stores/orders/{orderId}:
    get:
      tags:
        - Order
      summary: View a single order
      description: A seller can view a single order
      operationId: singleOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal server error

  /orders/{orderId}:
    get:
      tags:
        - Order
      summary: Get a single order
      operationId: GetSingleOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error

  /orders/{orderId}/pay:
    get:
      tags:
        - Order
      summary: User can pay for order
      description: A user can pay for order
      operationId: PayForOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order to pay for
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal server error

  #################
  # ToBuy API #
  #################
  # /tobuy:
  #   post:
  #     tags:
  #       - ToBuy
  #     summary: Create a new to buy list
  #     operationId: CreateToBuy
  #     requestBody:
  #       description: Add multiple contents to the tobuy list
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/CreateToBuy'
  #     responses:
  #       '201':
  #         description: Success
  #       '400':
  #         description: Bad request
  #       '401':
  #         description: Unauthorized
  #       '500':
  #         description: Internal server error

  # /tobuy/{id}:
  #   patch:
  #     tags:
  #       - ToBuy
  #     summary: Complete a tobuy
  #     operationId: CompleteToBuy
  #     parameters:
  #       - name: id
  #         in: path
  #         description: ID of the tobuy to complete
  #         required: true
  #         schema:
  #           type: string
  #     responses:
  #       '200':
  #         description: Success
  #       '400':
  #         description: Bad request
  #       '401':
  #         description: Unauthorized
  #       '403':
  #         description: Forbidden
  #       '404':
  #         description: Not Found
  #       '500':
  #         description: Internal Server Error

  #   delete:
  #     tags:
  #       - ToBuy
  #     summary: Delete a tobuy
  #     operationId: DeleteToBuy
  #     parameters:
  #       - name: id
  #         in: path
  #         description: ID of the tobuy to delete
  #         required: true
  #         schema:
  #           type: string
  #     responses:
  #       '204':
  #         description: Success
  #       '400':
  #         description: Bad request
  #       '401':
  #         description: Unauthorized
  #       '403':
  #         description: Forbidden
  #       '404':
  #         description: Not Found
  #       '500':
  #         description: Internal Server Error

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    RegisterUser:
      type: object
      properties:
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: johndoe@gmail.com
        password:
          type: string
          example: 12345678
        passwordConfirm:
          type: string
          example: 12345678
    LoginUser:
      type: object
      properties:
        email:
          type: string
          example: johndoe@gmail.com
        password:
          type: string
          example: 12345678
    CreateStore:
      required:
        - businessName
        - businessLocation
        - description
        - address
        - city
        - country
        - storeImage
        - logo
      type: object
      properties:
        businessName:
          type: string
          example: Janee Clothings
        businessLocation:
          type: string
          example: Kano, Nigeria
        description:
          type: string
          example: We sell good and quality clothings
        address:
          type: string
          example: 12, Alhaji Ajase street
        city:
          type: string
          example: Kano
        country:
          type: string
          example: Nigeria
        storeImage:
          type: string
          format: binary
        logo:
          type: string
          format: binary
    UpdateStore:
      required:
        - description
        - address
        - city
        - country
        - storeImage
        - logo
      type: object
      properties:
        businessName:
          type: string
          example: Janee Couture
        businessLocation:
          type: string
          example: Kaduna, Nigeria
        address:
          type: string
          example: 22, Sambo Kadir street, Kaduna
        country:
          type: string
          example: Nigeria
        storeImage:
          type: string
          format: binary
        logo:
          type: string
          format: binary
    # CreateToBuy:
    #   type: array
    #   items:
    #     type: object
    #     properties:
    #       title:
    #         type: string
    #   example:
    #     - title: Buy a new phone
    #     - title: Repair my laptop
